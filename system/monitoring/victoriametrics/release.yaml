apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: victoriametrics
spec:
  releaseName: vm
  chart:
    spec:
      chart: victoria-metrics-k8s-stack
      sourceRef:
        kind: HelmRepository
        name: victoriametrics
      version: "0.20.0"
  interval: 1h0m0s
  valuesFrom:
  - kind: Secret
    name: alerts-urls
    valuesKey: slack-api-url
    targetPath: alertmanager.config.global.slack_api_url
  - kind: Secret
    name: alerts-urls
    valuesKey: healthchecks-io-url
    targetPath: alertmanager.config.receivers[1].webhook_configs[0].url
  values:
    vmsingle:
      enabled: false
    vmcluster:
      enabled: true
      spec:
        vmselect:
          resources:
            limits:
              cpu: 1000m
        vminsert:
          extraArgs:
           maxLabelsPerTimeseries: "35"
    vmagent:
      spec:
        resources:
          limits:
            cpu: 1000m
    vmalert:
      ingress:
        enabled: true
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-prod"
          nginx.ingress.kubernetes.io/auth-url: "https://auth--test-cluster.elifesciences.org/oauth2/auth"
          nginx.ingress.kubernetes.io/auth-signin: "https://auth--test-cluster.elifesciences.org/oauth2/start?rd=https%3A%2F%2F$host$request_uri"
        hosts:
        - vmalert.${cluster_domain}
        tls:
        - secretName: vmalert-tls
          hosts:
          - vmalert.${cluster_domain}
    grafana:
      sidecar:
        alerts:
          enabled: true
          searchNamespace: ALL
        dashboards:
          enabled: true
          searchNamespace: ALL
        datasources:
          enabled: true
          searchNamespace: ALL
        plugins:
          enabled: true
          searchNamespace: ALL
      grafana.ini:
        auth:
          oauth_auto_login: true
          signout_redirect_url: "https://auth--test-cluster.elifesciences.org/oauth2/sign_out"
        auth.proxy:
          enabled: true
          header_name: X-Email
          header_property: email
          headers: Name:X-User
          enable_login_token: false
        users:
          allow_sign_up: false
          auto_assign_org: true
          auto_assign_org_role: Admin
      ingress:
        enabled: true
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-prod"
          nginx.ingress.kubernetes.io/auth-url: "https://auth--test-cluster.elifesciences.org/oauth2/auth"
          nginx.ingress.kubernetes.io/auth-signin: "https://auth--test-cluster.elifesciences.org/oauth2/start?rd=https%3A%2F%2F$host$request_uri"
          nginx.ingress.kubernetes.io/configuration-snippet: |
            auth_request_set $user   $upstream_http_x_auth_request_user;
            auth_request_set $email  $upstream_http_x_auth_request_email;
            proxy_set_header X-User  $user;
            proxy_set_header X-Email $email;
        hosts:
        - grafana.${cluster_domain}
        tls:
        - secretName: grafana-tls
          hosts:
          - grafana.${cluster_domain}
    # to sit alongside kube-prometheus-stack. This can be removed if that is no longer deployed
    prometheus-node-exporter:
      service:
        port: 9101
    alertmanager:
      spec:
        externalURL: https://alertmanager.${cluster_domain}
      ingress:
        enabled: true
        hosts:
        - alertmanager.${cluster_domain}
        tls:
        - secretName: alertmanager-tls
          hosts:
          - alertmanager.${cluster_domain}
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-prod"
          nginx.ingress.kubernetes.io/auth-url: "https://auth--test-cluster.elifesciences.org/oauth2/auth"
          nginx.ingress.kubernetes.io/auth-signin: "https://auth--test-cluster.elifesciences.org/oauth2/start?rd=https%3A%2F%2F$host$request_uri"

      config:
        global:
          resolve_timeout: 5m
        route:
          group_by: ["alertgroup", "job"]
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 12h
          receiver: "slack-monitoring"
          routes:
          - matchers:
              - severity=~"info|warning|critical"
            receiver: slack-monitoring
            continue: true
          - matchers:
            - "alertname = Watchdog"
            group_interval: 1m
            repeat_interval: 1m
            receiver: 'healthchecks.io'
          - matchers:
            - "alertname = Watchdog"
            receiver: "Watchdog"
          - matchers:
            - "alertname = InfoInhibitor"
            receiver: 'null'
        inhibit_rules:
        - target_matchers:
          - severity=~"warning|info"
          source_matchers:
          - severity=critical
          equal:
          - cluster
          - namespace
          - alertname
        - target_matchers:
          - severity=info
          source_matchers:
          - severity=warning
          equal:
          - cluster
          - namespace
          - alertname
        - target_matchers:
          - severity=info
          source_matchers:
          - alertname=InfoInhibitor
          equal:
          - cluster
          - namespace

        receivers:
        - name: slack-monitoring
          slack_configs:
          - channel: "#alerts-test"
            send_resolved: true
            title: '{{ template "slack.monzo.title" . }}'
            icon_emoji: '{{ template "slack.monzo.icon_emoji" . }}'
            color: '{{ template "slack.monzo.color" . }}'
            text: '{{ template "slack.monzo.text" . }}'
            actions:
            - name: runbook
              type: button
              text: "Runbook :green_book:"
              url: "{{ (index .Alerts 0).Annotations.runbook_url }}"
            - name: query
              type: button
              text: "Query :mag:"
              url: "{{ (index .Alerts 0).GeneratorURL }}"
            - name: dashboard
              type: button
              text: "Dashboard :grafana:"
              url: "{{ (index .Alerts 0).Annotations.dashboard_url }}"
            - name: silence
              type: button
              text: "Silence :no_bell:"
              url: '{{ template "__alert_silence_link" . }}'
            - name: link
              type: button
              text: '{{ template "slack.monzo.link_button_text" . }}'
              url: "{{ .CommonAnnotations.link_url }}"
        - name: healthchecks.io
          webhook_configs:
          - url: test
            send_resolved: false
        - name: Watchdog
    defaultRules:
      rules:
        kubeScheduler: false    # lives on EKS
        kubeApiserver: false  # too memory intensive
      disabled:
        KubeCPUOvercommit: true
    kubeControllerManager:
      enabled: false  # lives on EKS
